
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.text.ParseException;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\007" +
    "\000\002\003\011\000\002\003\014\000\002\003\007\000" +
    "\002\003\011\000\002\003\007\000\002\003\007\000\002" +
    "\003\010\000\002\003\005\000\002\003\006\000\002\003" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\002" +
    "\000\002\021\003\000\002\021\002\000\002\022\003\000" +
    "\002\022\002\000\002\010\002\000\002\007\004\000\002" +
    "\007\006\000\002\007\005\000\002\007\007\000\002\004" +
    "\003\000\002\004\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\004\000\002\004" +
    "\005\000\002\004\007\000\002\004\005\000\002\004\005" +
    "\000\002\012\003\000\002\012\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\017" +
    "\003\000\002\017\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\060\004\015\006\023\010\010\013\041\014" +
    "\004\027\020\033\032\034\012\044\011\045\027\046\014" +
    "\047\031\050\035\051\022\052\026\053\037\054\006\055" +
    "\021\062\024\063\013\064\036\065\040\070\033\001\002" +
    "\000\030\006\uffc4\013\uffc4\014\uffc4\027\uffc4\033\uffc4\034" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\001\002" +
    "\000\062\002\214\004\015\006\023\010\010\013\041\014" +
    "\004\027\020\033\032\034\012\044\011\045\027\046\014" +
    "\047\031\050\035\051\022\052\026\053\037\054\006\055" +
    "\021\062\024\063\013\064\036\065\040\070\033\001\002" +
    "\000\100\007\uffe4\010\uffe4\011\210\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\205\041\212" +
    "\042\207\043\206\057\uffe4\060\uffe4\061\uffe4\066\uffe4\001" +
    "\002\000\004\054\202\001\002\000\066\002\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\010\ufff2\013\ufff2\014\ufff2\027\ufff2\033" +
    "\ufff2\034\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\070\ufff2\001\002\000\004" +
    "\054\uffbc\001\002\000\030\006\uffc2\013\uffc2\014\uffc2\027" +
    "\uffc2\033\uffc2\034\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\001\002\000\004\006\176\001\002\000\004\054" +
    "\uffba\001\002\000\060\004\uffea\006\uffea\010\uffea\013\uffea" +
    "\014\uffea\027\uffea\033\uffea\034\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\062\uffea\063\uffea\064\uffea\065\uffea\070\uffea\001" +
    "\002\000\030\006\023\013\041\014\004\027\020\033\032" +
    "\034\012\050\035\051\022\052\026\053\037\054\006\001" +
    "\002\000\056\010\170\013\075\014\051\015\066\016\071" +
    "\017\055\020\076\021\070\022\052\023\072\024\056\025" +
    "\050\026\054\030\047\031\074\033\073\034\057\035\067" +
    "\036\064\037\062\057\100\061\065\001\002\000\030\006" +
    "\023\013\041\014\004\027\020\033\032\034\012\050\035" +
    "\051\022\052\026\053\037\054\006\001\002\000\004\006" +
    "\161\001\002\000\066\007\uffb7\010\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\066\uffb7\001\002\000\030\006\023\013\041" +
    "\014\004\027\020\033\032\034\012\050\035\051\022\052" +
    "\026\053\037\054\006\001\002\000\060\004\015\006\023" +
    "\010\010\013\041\014\004\027\020\033\032\034\012\044" +
    "\011\045\027\046\014\047\031\050\035\051\022\052\026" +
    "\053\037\054\006\055\021\062\024\063\013\064\036\065" +
    "\040\070\033\001\002\000\006\010\150\012\142\001\002" +
    "\000\066\007\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\066\uffb6\001\002\000\004\054\uffbb\001\002\000\064\002" +
    "\001\004\001\005\001\006\001\010\001\013\001\014\001" +
    "\027\001\033\001\034\001\044\001\045\001\046\001\047" +
    "\001\050\001\051\001\052\001\053\001\054\001\055\001" +
    "\062\001\063\001\064\001\065\001\070\001\001\002\000" +
    "\004\054\uffb9\001\002\000\030\006\uffc3\013\uffc3\014\uffc3" +
    "\027\uffc3\033\uffc3\034\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\001\002\000\030\006\023\013\041\014\004" +
    "\027\020\033\032\034\012\050\035\051\022\052\026\053" +
    "\037\054\006\001\002\000\066\007\uffe5\010\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5" +
    "\031\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\066\uffe5\001\002\000\066\007\uffb8" +
    "\010\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\057\uffb8\060\uffb8\061\uffb8\066\uffb8\001\002" +
    "\000\004\006\uffea\001\002\000\066\007\uffb5\010\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\030" +
    "\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\066\uffb5\001\002\000\062\004" +
    "\015\006\042\010\010\013\041\014\004\027\020\033\032" +
    "\034\012\044\011\045\027\046\014\047\031\050\035\051" +
    "\022\052\026\053\037\054\006\055\021\062\024\063\013" +
    "\064\036\065\040\067\043\070\033\001\002\000\030\006" +
    "\uffc1\013\uffc1\014\uffc1\027\uffc1\033\uffc1\034\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\001\002\000\030\006" +
    "\023\013\041\014\004\027\020\033\032\034\012\050\035" +
    "\051\022\052\026\053\037\054\006\001\002\000\060\004" +
    "\015\006\023\010\010\013\041\014\004\027\020\033\032" +
    "\034\012\044\011\045\027\046\014\047\031\050\035\051" +
    "\022\052\026\053\037\054\006\055\021\062\024\063\013" +
    "\064\036\065\040\070\033\001\002\000\030\006\023\013" +
    "\041\014\004\027\020\033\032\034\012\050\035\051\022" +
    "\052\026\053\037\054\006\001\002\000\056\013\075\014" +
    "\051\015\066\016\071\017\055\020\076\021\070\022\052" +
    "\023\072\024\056\025\050\026\054\030\047\031\074\033" +
    "\073\034\057\035\067\036\064\037\062\057\100\061\065" +
    "\066\046\001\002\000\004\010\115\001\002\000\030\006" +
    "\023\013\041\014\004\027\020\033\032\034\012\050\035" +
    "\051\022\052\026\053\037\054\006\001\002\000\030\006" +
    "\023\013\041\014\004\027\020\033\032\034\012\050\035" +
    "\051\022\052\026\053\037\054\006\001\002\000\030\006" +
    "\uffd3\013\uffd3\014\uffd3\027\uffd3\033\uffd3\034\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\001\002\000\030\006" +
    "\uffcc\013\uffcc\014\uffcc\027\uffcc\033\uffcc\034\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\001\002\000\030\006" +
    "\023\013\041\014\004\027\020\033\032\034\012\050\035" +
    "\051\022\052\026\053\037\054\006\001\002\000\030\006" +
    "\023\013\041\014\004\027\020\033\032\034\012\050\035" +
    "\051\022\052\026\053\037\054\006\001\002\000\030\006" +
    "\uffcf\013\uffcf\014\uffcf\027\uffcf\033\uffcf\034\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002\000\030\006" +
    "\uffca\013\uffca\014\uffca\027\uffca\033\uffca\034\uffca\050\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\001\002\000\066\007" +
    "\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\057\uffbf\060\uffbf\061\uffbf\066\uffbf\001" +
    "\002\000\030\006\023\013\041\014\004\027\020\033\032" +
    "\034\012\050\035\051\022\052\026\053\037\054\006\001" +
    "\002\000\066\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\066\uffd9\001\002\000\030\006\uffd0\013\uffd0\014\uffd0" +
    "\027\uffd0\033\uffd0\034\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\001\002\000\030\006\023\013\041\014\004" +
    "\027\020\033\032\034\012\050\035\051\022\052\026\053" +
    "\037\054\006\001\002\000\030\006\uffbd\013\uffbd\014\uffbd" +
    "\027\uffbd\033\uffbd\034\uffbd\050\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\001\002\000\030\006\023\013\041\014\004" +
    "\027\020\033\032\034\012\050\035\051\022\052\026\053" +
    "\037\054\006\001\002\000\030\006\uffd2\013\uffd2\014\uffd2" +
    "\027\uffd2\033\uffd2\034\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\001\002\000\030\006\uffbe\013\uffbe\014\uffbe" +
    "\027\uffbe\033\uffbe\034\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\001\002\000\030\006\uffcd\013\uffcd\014\uffcd" +
    "\027\uffcd\033\uffcd\034\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\001\002\000\030\006\uffd1\013\uffd1\014\uffd1" +
    "\027\uffd1\033\uffd1\034\uffd1\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\001\002\000\030\006\uffcb\013\uffcb\014\uffcb" +
    "\027\uffcb\033\uffcb\034\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\001\002\000\066\007\uffc0\010\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0" +
    "\031\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\066\uffc0\001\002\000\030\006\023" +
    "\013\041\014\004\027\020\033\032\034\012\050\035\051" +
    "\022\052\026\053\037\054\006\001\002\000\030\006\uffd4" +
    "\013\uffd4\014\uffd4\027\uffd4\033\uffd4\034\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\001\002\000\030\006\uffce" +
    "\013\uffce\014\uffce\027\uffce\033\uffce\034\uffce\050\uffce\051" +
    "\uffce\052\uffce\053\uffce\054\uffce\001\002\000\030\006\023" +
    "\013\041\014\004\027\020\033\032\034\012\050\035\051" +
    "\022\052\026\053\037\054\006\001\002\000\030\006\023" +
    "\013\041\014\004\027\020\033\032\034\012\050\035\051" +
    "\022\052\026\053\037\054\006\001\002\000\056\013\075" +
    "\014\051\015\066\016\071\017\055\020\076\021\070\022" +
    "\052\023\072\024\056\025\050\026\054\030\047\031\074" +
    "\033\073\034\057\035\067\036\064\037\062\057\100\060" +
    "\102\061\065\001\002\000\030\006\023\013\041\014\004" +
    "\027\020\033\032\034\012\050\035\051\022\052\026\053" +
    "\037\054\006\001\002\000\066\007\uffd7\010\uffd7\012\uffd7" +
    "\013\075\014\051\015\066\016\071\017\055\020\076\021" +
    "\070\022\052\023\072\024\056\025\050\026\054\030\047" +
    "\031\074\033\073\034\057\035\067\036\064\037\uffd7\057" +
    "\uffd7\060\uffd7\061\065\066\uffd7\001\002\000\066\007\uffe0" +
    "\010\uffe0\012\uffe0\013\075\014\051\015\066\016\071\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\030\uffe0\031\uffe0\033\073\034\057\035\067\036" +
    "\064\037\uffe0\057\uffe0\060\uffe0\061\065\066\uffe0\001\002" +
    "\000\066\007\uffdb\010\uffdb\012\uffdb\013\075\014\051\015" +
    "\066\016\071\017\055\020\076\021\070\022\052\023\072" +
    "\024\056\025\050\026\054\030\047\031\074\033\073\034" +
    "\057\035\067\036\064\037\uffdb\057\uffdb\060\uffdb\061\065" +
    "\066\uffdb\001\002\000\066\007\uffd6\010\uffd6\012\uffd6\013" +
    "\075\014\051\015\066\016\071\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6\031" +
    "\uffd6\033\073\034\057\035\067\036\064\037\uffd6\057\uffd6" +
    "\060\uffd6\061\065\066\uffd6\001\002\000\066\007\uffd8\010" +
    "\uffd8\012\uffd8\013\075\014\051\015\066\016\071\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\030\uffd8\031\uffd8\033\073\034\057\035\uffd8\036\uffd8" +
    "\037\uffd8\057\uffd8\060\uffd8\061\uffd8\066\uffd8\001\002\000" +
    "\066\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1\033\073\034\057" +
    "\035\uffe1\036\uffe1\037\uffe1\057\uffe1\060\uffe1\061\uffe1\066" +
    "\uffe1\001\002\000\066\007\uffde\010\uffde\012\uffde\013\075" +
    "\014\051\015\066\016\071\017\055\020\076\021\070\022" +
    "\052\023\072\024\056\025\050\026\uffde\030\uffde\031\uffde" +
    "\033\073\034\057\035\067\036\064\037\uffde\057\uffde\060" +
    "\uffde\061\065\066\uffde\001\002\000\066\007\uffe2\010\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\066\016\071\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\030\uffe2\031\uffe2\033\073\034\057\035\uffe2\036\uffe2\037" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\066\uffe2\001\002\000\066" +
    "\007\uffdf\010\uffdf\012\uffdf\013\075\014\051\015\066\016" +
    "\071\017\055\020\076\021\070\022\052\023\072\024\056" +
    "\025\uffdf\026\uffdf\030\uffdf\031\uffdf\033\073\034\057\035" +
    "\067\036\064\037\uffdf\057\uffdf\060\uffdf\061\065\066\uffdf" +
    "\001\002\000\066\007\uffdc\010\uffdc\012\uffdc\013\075\014" +
    "\051\015\066\016\071\017\055\020\076\021\070\022\052" +
    "\023\072\024\056\025\050\026\054\030\047\031\074\033" +
    "\073\034\057\035\067\036\064\037\uffdc\057\uffdc\060\uffdc" +
    "\061\065\066\uffdc\001\002\000\066\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\010\ufff7\013\ufff7\014\ufff7\027\ufff7\033\ufff7" +
    "\034\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\070\ufff7\001\002\000\030\006" +
    "\023\013\041\014\004\027\020\033\032\034\012\050\035" +
    "\051\022\052\026\053\037\054\006\001\002\000\056\013" +
    "\075\014\051\015\066\016\071\017\055\020\076\021\070" +
    "\022\052\023\072\024\056\025\050\026\054\030\047\031" +
    "\074\033\073\034\057\035\067\036\064\037\062\057\100" +
    "\061\065\066\120\001\002\000\004\010\121\001\002\000" +
    "\066\002\ufff5\004\ufff5\005\ufff5\006\ufff5\010\ufff5\013\ufff5" +
    "\014\ufff5\027\ufff5\033\ufff5\034\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\070" +
    "\ufff5\001\002\000\056\007\123\013\075\014\051\015\066" +
    "\016\071\017\055\020\076\021\070\022\052\023\072\024" +
    "\056\025\050\026\054\030\047\031\074\033\073\034\057" +
    "\035\067\036\064\037\062\057\100\061\065\001\002\000" +
    "\122\004\015\006\023\010\uffd5\013\041\014\004\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\020\030\uffd5\031\uffd5\033\032" +
    "\034\012\035\uffd5\036\uffd5\037\uffd5\044\011\045\027\046" +
    "\014\047\031\050\035\051\022\052\026\053\037\054\006" +
    "\055\021\057\uffd5\061\uffd5\062\024\063\013\064\036\065" +
    "\040\070\033\001\002\000\066\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\010\ufff6\013\ufff6\014\ufff6\027\ufff6\033\ufff6\034" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\062\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\070\ufff6\001\002\000\004\006\126" +
    "\001\002\000\042\006\023\010\uffef\013\041\014\004\027" +
    "\020\033\032\034\012\044\011\045\027\046\014\047\031" +
    "\050\035\051\022\052\026\053\037\054\006\001\002\000" +
    "\056\010\ufff0\013\075\014\051\015\066\016\071\017\055" +
    "\020\076\021\070\022\052\023\072\024\056\025\050\026" +
    "\054\030\047\031\074\033\073\034\057\035\067\036\064" +
    "\037\062\057\100\061\065\001\002\000\006\010\ufff1\012" +
    "\142\001\002\000\004\010\132\001\002\000\032\006\023" +
    "\010\uffed\013\041\014\004\027\020\033\032\034\012\050" +
    "\035\051\022\052\026\053\037\054\006\001\002\000\004" +
    "\010\135\001\002\000\056\010\uffee\013\075\014\051\015" +
    "\066\016\071\017\055\020\076\021\070\022\052\023\072" +
    "\024\056\025\050\026\054\030\047\031\074\033\073\034" +
    "\057\035\067\036\064\037\062\057\100\061\065\001\002" +
    "\000\032\006\023\007\uffeb\013\041\014\004\027\020\033" +
    "\032\034\012\050\035\051\022\052\026\053\037\054\006" +
    "\001\002\000\056\007\uffec\013\075\014\051\015\066\016" +
    "\071\017\055\020\076\021\070\022\052\023\072\024\056" +
    "\025\050\026\054\030\047\031\074\033\073\034\057\035" +
    "\067\036\064\037\062\057\100\061\065\001\002\000\004" +
    "\007\140\001\002\000\060\004\015\006\023\010\010\013" +
    "\041\014\004\027\020\033\032\034\012\044\011\045\027" +
    "\046\014\047\031\050\035\051\022\052\026\053\037\054" +
    "\006\055\021\062\024\063\013\064\036\065\040\070\033" +
    "\001\002\000\066\002\ufffa\004\ufffa\005\ufffa\006\ufffa\010" +
    "\ufffa\013\ufffa\014\ufffa\027\ufffa\033\ufffa\034\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\062\ufffa\063\ufffa\064\ufffa" +
    "\065\ufffa\070\ufffa\001\002\000\004\054\143\001\002\000" +
    "\010\010\uffe7\011\144\012\uffe7\001\002\000\030\006\023" +
    "\013\041\014\004\027\020\033\032\034\012\050\035\051" +
    "\022\052\026\053\037\054\006\001\002\000\060\010\uffe6" +
    "\012\uffe6\013\075\014\051\015\066\016\071\017\055\020" +
    "\076\021\070\022\052\023\072\024\056\025\050\026\054" +
    "\030\047\031\074\033\073\034\057\035\067\036\064\037" +
    "\062\057\100\061\065\001\002\000\056\010\147\013\075" +
    "\014\051\015\066\016\071\017\055\020\076\021\070\022" +
    "\052\023\072\024\056\025\050\026\054\030\047\031\074" +
    "\033\073\034\057\035\067\036\064\037\062\057\100\061" +
    "\065\001\002\000\066\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\010\ufff4\013\ufff4\014\ufff4\027\ufff4\033\ufff4\034\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\070\ufff4\001\002\000\066\002\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\010\ufffe\013\ufffe\014\ufffe\027\ufffe\033" +
    "\ufffe\034\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\062" +
    "\ufffe\063\ufffe\064\ufffe\065\ufffe\070\ufffe\001\002\000\004" +
    "\063\152\001\002\000\004\006\153\001\002\000\030\006" +
    "\023\013\041\014\004\027\020\033\032\034\012\050\035" +
    "\051\022\052\026\053\037\054\006\001\002\000\056\007" +
    "\155\013\075\014\051\015\066\016\071\017\055\020\076" +
    "\021\070\022\052\023\072\024\056\025\050\026\054\030" +
    "\047\031\074\033\073\034\057\035\067\036\064\037\062" +
    "\057\100\061\065\001\002\000\004\010\156\001\002\000" +
    "\066\002\ufff8\004\ufff8\005\ufff8\006\ufff8\010\ufff8\013\ufff8" +
    "\014\ufff8\027\ufff8\033\ufff8\034\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\070" +
    "\ufff8\001\002\000\056\007\160\013\075\014\051\015\066" +
    "\016\071\017\055\020\076\021\070\022\052\023\072\024" +
    "\056\025\050\026\054\030\047\031\074\033\073\034\057" +
    "\035\067\036\064\037\062\057\100\061\065\001\002\000" +
    "\066\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\057\uffd5\060\uffd5\061\uffd5\066" +
    "\uffd5\001\002\000\030\006\023\013\041\014\004\027\020" +
    "\033\032\034\012\050\035\051\022\052\026\053\037\054" +
    "\006\001\002\000\056\007\163\013\075\014\051\015\066" +
    "\016\071\017\055\020\076\021\070\022\052\023\072\024" +
    "\056\025\050\026\054\030\047\031\074\033\073\034\057" +
    "\035\067\036\064\037\062\057\100\061\065\001\002\000" +
    "\060\004\015\006\023\010\010\013\041\014\004\027\020" +
    "\033\032\034\012\044\011\045\027\046\014\047\031\050" +
    "\035\051\022\052\026\053\037\054\006\055\021\062\024" +
    "\063\013\064\036\065\040\070\033\001\002\000\066\002" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\010\ufffc\013\ufffc\014\ufffc" +
    "\027\ufffc\033\ufffc\034\ufffc\044\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc" +
    "\056\165\062\ufffc\063\ufffc\064\ufffc\065\ufffc\070\ufffc\001" +
    "\002\000\060\004\015\006\023\010\010\013\041\014\004" +
    "\027\020\033\032\034\012\044\011\045\027\046\014\047" +
    "\031\050\035\051\022\052\026\053\037\054\006\055\021" +
    "\062\024\063\013\064\036\065\040\070\033\001\002\000" +
    "\066\002\ufffb\004\ufffb\005\ufffb\006\ufffb\010\ufffb\013\ufffb" +
    "\014\ufffb\027\ufffb\033\ufffb\034\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\070" +
    "\ufffb\001\002\000\066\007\uffdd\010\uffdd\012\uffdd\013\075" +
    "\014\051\015\066\016\071\017\055\020\076\021\070\022" +
    "\052\023\072\024\056\025\uffdd\026\uffdd\030\uffdd\031\uffdd" +
    "\033\073\034\057\035\067\036\064\037\uffdd\057\uffdd\060" +
    "\uffdd\061\065\066\uffdd\001\002\000\066\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\010\ufffd\013\ufffd\014\ufffd\027\ufffd\033" +
    "\ufffd\034\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\065\ufffd\070\ufffd\001\002\000\062" +
    "\007\uffda\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\030\uffda\031\uffda\035\uffda\036\uffda\037" +
    "\uffda\057\uffda\060\uffda\061\uffda\066\uffda\001\002\000\060" +
    "\004\015\006\023\010\010\013\041\014\004\027\020\033" +
    "\032\034\012\044\011\045\027\046\014\047\031\050\035" +
    "\051\022\052\026\053\037\054\006\055\021\062\024\063" +
    "\013\064\036\065\040\070\033\001\002\000\062\004\015" +
    "\005\174\006\023\010\010\013\041\014\004\027\020\033" +
    "\032\034\012\044\011\045\027\046\014\047\031\050\035" +
    "\051\022\052\026\053\037\054\006\055\021\062\024\063" +
    "\013\064\036\065\040\070\033\001\002\000\066\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\010\ufff3\013\ufff3\014\ufff3\027" +
    "\ufff3\033\ufff3\034\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\070\ufff3\001\002" +
    "\000\064\002\uffff\004\uffff\005\uffff\006\uffff\010\uffff\013" +
    "\uffff\014\uffff\027\uffff\033\uffff\034\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\055\uffff\062\uffff\063\uffff\064\uffff\065\uffff\070\uffff" +
    "\001\002\000\030\006\023\013\041\014\004\027\020\033" +
    "\032\034\012\050\035\051\022\052\026\053\037\054\006" +
    "\001\002\000\056\007\200\013\075\014\051\015\066\016" +
    "\071\017\055\020\076\021\070\022\052\023\072\024\056" +
    "\025\050\026\054\030\047\031\074\033\073\034\057\035" +
    "\067\036\064\037\062\057\100\061\065\001\002\000\060" +
    "\004\015\006\023\010\010\013\041\014\004\027\020\033" +
    "\032\034\012\044\011\045\027\046\014\047\031\050\035" +
    "\051\022\052\026\053\037\054\006\055\021\062\024\063" +
    "\013\064\036\065\040\070\033\001\002\000\066\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\010\ufff9\013\ufff9\014\ufff9\027" +
    "\ufff9\033\ufff9\034\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\070\ufff9\001\002" +
    "\000\010\010\uffe9\011\203\012\uffe9\001\002\000\030\006" +
    "\023\013\041\014\004\027\020\033\032\034\012\050\035" +
    "\051\022\052\026\053\037\054\006\001\002\000\060\010" +
    "\uffe8\012\uffe8\013\075\014\051\015\066\016\071\017\055" +
    "\020\076\021\070\022\052\023\072\024\056\025\050\026" +
    "\054\030\047\031\074\033\073\034\057\035\067\036\064" +
    "\037\062\057\100\061\065\001\002\000\030\006\uffc8\013" +
    "\uffc8\014\uffc8\027\uffc8\033\uffc8\034\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\001\002\000\030\006\uffc5\013" +
    "\uffc5\014\uffc5\027\uffc5\033\uffc5\034\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\001\002\000\030\006\uffc6\013" +
    "\uffc6\014\uffc6\027\uffc6\033\uffc6\034\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\001\002\000\030\006\uffc9\013" +
    "\uffc9\014\uffc9\027\uffc9\033\uffc9\034\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\001\002\000\030\006\023\013" +
    "\041\014\004\027\020\033\032\034\012\050\035\051\022" +
    "\052\026\053\037\054\006\001\002\000\030\006\uffc7\013" +
    "\uffc7\014\uffc7\027\uffc7\033\uffc7\034\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\001\002\000\066\007\uffe3\010" +
    "\uffe3\012\uffe3\013\075\014\051\015\066\016\071\017\055" +
    "\020\076\021\070\022\052\023\072\024\056\025\050\026" +
    "\054\030\047\031\074\033\073\034\057\035\067\036\064" +
    "\037\uffe3\057\100\060\uffe3\061\065\066\uffe3\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\020\002\004\003\027\004\016\005\006\006" +
    "\033\007\024\014\015\001\001\000\002\001\001\000\016" +
    "\003\174\004\016\005\006\006\033\007\024\014\015\001" +
    "\001\000\004\013\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\171\001\001\000\010" +
    "\004\170\006\033\014\015\001\001\000\014\011\057\012" +
    "\052\015\060\016\076\017\062\001\001\000\010\004\166" +
    "\006\033\014\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\156\006\033\014\015\001\001\000\016" +
    "\003\150\004\016\005\006\006\033\007\024\014\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\145\006\033\014\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\124\001\001\000\002\001" +
    "\001\000\016\003\043\004\016\005\006\006\033\007\024" +
    "\014\015\001\001\000\002\001\001\000\010\004\121\006" +
    "\033\014\015\001\001\000\016\003\115\004\016\005\006" +
    "\006\033\007\024\014\015\001\001\000\010\004\044\006" +
    "\033\014\015\001\001\000\014\011\057\012\052\015\060" +
    "\016\076\017\062\001\001\000\002\001\001\000\010\004" +
    "\113\006\033\014\015\001\001\000\010\004\112\006\033" +
    "\014\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\111\006\033\014\015\001\001\000\010\004\110" +
    "\006\033\014\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\107\006\033\014\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\106\006\033\014\015\001\001\000\002\001\001\000\010" +
    "\004\105\006\033\014\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\104\006\033\014" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\103\006\033\014\015\001\001\000\010\004\100\006" +
    "\033\014\015\001\001\000\014\011\057\012\052\015\060" +
    "\016\076\017\062\001\001\000\010\004\102\006\033\014" +
    "\015\001\001\000\014\011\057\012\052\015\060\016\076" +
    "\017\062\001\001\000\014\011\057\012\052\015\060\016" +
    "\076\017\062\001\001\000\014\011\057\012\052\015\060" +
    "\016\076\017\062\001\001\000\014\011\057\012\052\015" +
    "\060\016\076\017\062\001\001\000\014\011\057\012\052" +
    "\015\060\016\076\017\062\001\001\000\014\011\057\012" +
    "\052\015\060\016\076\017\062\001\001\000\014\011\057" +
    "\012\052\015\060\016\076\017\062\001\001\000\014\011" +
    "\057\012\052\015\060\016\076\017\062\001\001\000\014" +
    "\011\057\012\052\015\060\016\076\017\062\001\001\000" +
    "\014\011\057\012\052\015\060\016\076\017\062\001\001" +
    "\000\002\001\001\000\010\004\116\006\033\014\015\001" +
    "\001\000\014\011\057\012\052\015\060\016\076\017\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\057\012\052\015\060\016\076\017\062\001\001\000\016" +
    "\003\123\004\016\005\006\006\033\007\024\014\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\126" +
    "\005\006\006\033\007\127\014\015\020\130\001\001\000" +
    "\014\011\057\012\052\015\060\016\076\017\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\133\006" +
    "\033\014\015\021\132\001\001\000\002\001\001\000\014" +
    "\011\057\012\052\015\060\016\076\017\062\001\001\000" +
    "\012\004\135\006\033\014\015\022\136\001\001\000\014" +
    "\011\057\012\052\015\060\016\076\017\062\001\001\000" +
    "\002\001\001\000\016\003\140\004\016\005\006\006\033" +
    "\007\024\014\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\144\006\033\014\015" +
    "\001\001\000\014\011\057\012\052\015\060\016\076\017" +
    "\062\001\001\000\014\011\057\012\052\015\060\016\076" +
    "\017\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\153\006\033" +
    "\014\015\001\001\000\014\011\057\012\052\015\060\016" +
    "\076\017\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\057\012\052\015\060\016\076\017\062\001" +
    "\001\000\002\001\001\000\010\004\161\006\033\014\015" +
    "\001\001\000\014\011\057\012\052\015\060\016\076\017" +
    "\062\001\001\000\016\003\163\004\016\005\006\006\033" +
    "\007\024\014\015\001\001\000\002\001\001\000\016\003" +
    "\165\004\016\005\006\006\033\007\024\014\015\001\001" +
    "\000\002\001\001\000\014\011\057\012\052\015\060\016" +
    "\076\017\062\001\001\000\002\001\001\000\014\011\057" +
    "\012\052\015\060\016\076\017\062\001\001\000\020\002" +
    "\172\003\027\004\016\005\006\006\033\007\024\014\015" +
    "\001\001\000\016\003\174\004\016\005\006\006\033\007" +
    "\024\014\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\176\006\033\014\015\001\001\000\014\011" +
    "\057\012\052\015\060\016\076\017\062\001\001\000\016" +
    "\003\200\004\016\005\006\006\033\007\024\014\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\203" +
    "\006\033\014\015\001\001\000\014\011\057\012\052\015" +
    "\060\016\076\017\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\212\006\033\014\015\001\001\000\002\001\001\000\014" +
    "\011\057\012\052\015\060\016\076\017\062\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    action_obj.tabla = new TablaSimbolos(); // Se crea la tabla de símbolos
    action_obj.bloqueActual = 0 ;           // Se inicializa a 0 el número de bloque actual
    action_obj.numBloques   = 0 ;           // Se inicializa a 0 el número de bloques totales

    }



	// Normalmente, este procedimiento se deja vacío.
	public void syntax_error(Symbol cur_token) { }

    public void unrecovered_syntax_error(Symbol cur_token){

        // Para mostrar mensajes de error en el código
        System.err.println("\u001B[33m" + "ERROR (PLXC.cup): # Syntax error en línea " + PLXC.lex.getLine()+ ", columna "+
                            PLXC.lex.getColumn() + " con el token " + sym.terminalNames[cur_token.sym] + "\u001B[0m");
                            // Cuidado con el sym.terminalNames
        PLXC.out.println("ERROR (PLXC.cup): # Syntax error, caracter inesperado: <" + cur_token.value + ">" +
                                  " en la línea " + PLXC.lex.getLine() + " y la columna " + PLXC.lex.getColumn()
                                   + " con el token " + sym.terminalNames[cur_token.sym]);
        PLXC.out.println("    " + "error;") ;
        PLXC.out.println("    " + "halt;") ;

        // report_error("Syntax error", null);
        // done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    TablaSimbolos tabla  ; // Se inicializa la tabla de símbolos
    Integer bloqueActual ; // Hace referencia al número de bloque actual
    Integer numBloques   ; // Hace referencia al número de bloques totales

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaSentencias ::= sentencia 
            {
              Bloque RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            // Se crea un nuevo bloque
                            // Línea del código fuente para depuración de errores
                            Bloque b = new Bloque (PLXC.lex.getLine()) ;
                            // Se añade la instrucción al bloque
                            b.addInstruccion(s) ;
                            // Se devuelve el bloque con la instrucción añadida
                            RESULT = b ;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaSentencias EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSentencias ::= listaSentencias sentencia 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            // Se añade la instrucción al bloque
                            l.addInstruccion(s) ;
                            // Se devuelve esa lista de sentencias (lista de bloques)
                            RESULT = l ;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= listaDeclarVariables PYC 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaVariables l = (ListaVariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        // Devuelve la lista de variables declaradas
                        RESULT = l ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= expresion PYC 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        // Devuelve una expresión
                        RESULT = e ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= IF AP expresion CP sentencia 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        //                           línea, condición, cuerpo del if y cuerpo del else (nulo)
                        RESULT = new SentIF(PLXC.lex.getLine(),e,s,null) ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= IF AP expresion CP sentencia ELSE sentencia 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        //                           línea, condición, cuerpo del if y cuerpo del else
                        RESULT = new SentIF(PLXC.lex.getLine(),e,s1,s2) ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= FOR inicioBloque AP inicioFor PYC condicionFor PYC actualizacionFor CP sentencia 
            {
              Instruccion RESULT =null;
		int bloqueAnteriorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bloqueAnteriorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer bloqueAnterior = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        tabla.eliminarBloque(bloqueActual) ;
                        bloqueActual = bloqueAnterior ;
                        // Línea del código fuente para depuración de errores
                        //                       línea, inicio, condición, actualización y cuerpo del for
                        RESULT = new SentFOR(PLXC.lex.getLine(),i,c,a,s);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= WHILE AP expresion CP sentencia 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        // Línea del código fuente para depuración de errores
                        //                       línea, condición y cuerpo del while
                        RESULT = new SentWHILE(PLXC.lex.getLine(),e,s) ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= DO sentencia WHILE AP expresion CP PYC 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        //                           línea, condición y cuerpo del while
                        RESULT = new SentDOWHILE(PLXC.lex.getLine(),e,s) ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= REPEAT sentencia expresion TIMES PYC 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        // Línea del código fuente para depuración de errores
                        //                       línea, nºde veces y cuerpo del repeat
                        RESULT = new SentREPEAT(PLXC.lex.getLine(),e,s) ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= REPEAT AP expresion CP sentencia 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        // Línea del código fuente para depuración de errores
                        //                       línea, nºde veces y cuerpo del repeat
                        RESULT = new SentREPEAT(PLXC.lex.getLine(),e,s) ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= REPEAT JUST sentencia expresion TIMES PYC 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        // Línea del código fuente para depuración de errores
                        //                       línea, nºde veces y cuerpo del repeat
                        RESULT = new SentREPEATJUST(PLXC.lex.getLine(),e,s) ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= PRINT expresion PYC 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        // La clase LlamadaMetodo sirve para generar el árbol de código.
                        RESULT = new LlamadaMetodo
                        (
                            PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                            e, // x+5
                            Metodos.MOSTRAR, // Metodo MOSTRAR implementado en cada Tipo en el switch
                            null // Un print no tiene parámetros
                        );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= ALL inicioBloque listaSentencias CLL 
            {
              Instruccion RESULT =null;
		int bloqueAnteriorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueAnteriorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer bloqueAnterior = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        // Elimino de la tabla de símbolos el bloque en el que estoy
                        tabla.eliminarBloque(bloqueActual) ;
                        // Vuelvo a apuntar al bloque en el que estaba antes
                        bloqueActual = bloqueAnterior ;
                        // Devuelvo la nueva lista de sentencias
                        RESULT = l ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= PYC 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicioFor ::= listaDeclarVariables 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaVariables l = (ListaVariables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = l ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inicioFor ::= expresion 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = e ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicioFor ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicionFor ::= expresion 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = e ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionFor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicionFor ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionFor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // actualizacionFor ::= expresion 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = e ;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacionFor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // actualizacionFor ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacionFor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inicioBloque ::= 
            {
              Integer RESULT =null;
		
                        // Devuelvo el bloque actual
                        RESULT = bloqueActual ;
                        // Añado un bloque más al contador de bloques totales
                        numBloques++ ;
                        // El bloque actual es el bloque nuevo creado
                        bloqueActual = numBloques ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioBloque",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaDeclarVariables ::= tipo IDENT 
            {
              ListaVariables RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Variable v ;
                                // Se crea una nueva variable de tipo t en el bloque actual,
                                // importante considerar el mutable a true
                                v = new Variable(i,bloqueActual,true,t) ;

                                // Se añade un nuevo objeto a la tabla de símbolos, en este caso
                                // una variable con el metodo declararVariable
                                tabla.declararVariable(PLXC.lex.getLine(),v) ;
                                RESULT = new ListaVariables(PLXC.lex.getLine(),t) ;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclarVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaDeclarVariables ::= tipo IDENT ASIG expresion 
            {
              ListaVariables RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Variable v ;
                                // Se crea una nueva variable de tipo t en el bloque actual,
                                // importante considerar el mutable a true
                                v = new Variable(i,bloqueActual,true,t) ;

                                // Se añade un nuevo objeto a la tabla de símbolos, en este caso
                                // una variable con el método declararVariable
                                tabla.declararVariable(PLXC.lex.getLine(),v) ;

                                ListaVariables l = new ListaVariables(PLXC.lex.getLine(),t) ;
                                l.addInstruccion(new LlamadaMetodo
                                (
                                    PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                                    new ExpresionVariable(PLXC.lex.getLine(),v),
                                    Metodos.CREAR_VARIABLE, // Metodo CREAR_VARIABLE implementado en cada Tipo en el switch
                                    new Instruccion[]{e}
                                ));
                                RESULT = l ;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclarVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaDeclarVariables ::= listaDeclarVariables COMA IDENT 
            {
              ListaVariables RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaVariables l = (ListaVariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Variable v ;
                                // Se crea una nueva variable de tipo t en el bloque actual,
                                // importante considerar el mutable a true
                                v = new Variable(i,bloqueActual,true,l.getTipo()) ;
                                // Se añade un nuevo objeto a la tabla de símbolos, en este caso
                                // una variable con el método declararVariable
                                tabla.declararVariable(PLXC.lex.getLine(),v) ;
                                RESULT = l;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclarVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listaDeclarVariables ::= listaDeclarVariables COMA IDENT ASIG expresion 
            {
              ListaVariables RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaVariables l = (ListaVariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Variable v ;
                                // Se crea una nueva variable de tipo t en el bloque actual,
                                // importante considerar el mutable a true
                                v = new Variable(i,bloqueActual,true,l.getTipo()) ;

                                // Se añade un nuevo objeto a la tabla de símbolos, en este caso
                                // una variable con el método declararVariable
                                tabla.declararVariable(PLXC.lex.getLine(),v) ;
                                l.addInstruccion(new LlamadaMetodo
                                (
                                    PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                                    new ExpresionVariable(PLXC.lex.getLine(),v),
                                    Metodos.CREAR_VARIABLE, // Metodo CREAR_VARIABLE implementado en cada Tipo en el switch
                                    new Instruccion[]{e}
                                ));
                                RESULT = l ;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclarVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= literal 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    // La clase ExpresionLiteral hace referencia a una instrucción que contiene
                    // un literal
                    RESULT = new ExpresionLiteral(PLXC.lex.getLine(),l) ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= IDENT 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    // Busca si esa variable está definida
                    Objeto o = tabla.buscarObjeto(i) ;
                    // Si la variable no está definida debe lanzar un error:
                    // int x = 8 ;
                    // y = x ;
                    // Error variable y no definida
                    if (o == null) {
                        throw new ParseException("ERROR (PLXC.cup): Variable( " + i
                                                + ") no declarada", PLXC.lex.getLine()) ;
                    }
                    RESULT = new ExpresionVariable(PLXC.lex.getLine(), (Variable) o) ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= IDENT operadorAsignacion expresion 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    // Busca si esa variable está definida
                    Objeto o = tabla.buscarObjeto(i) ;
                    // Si la variable no está definida debe lanzar un error:
                    // int x = 8 ;
                    // y = x ;
                    // Error variable y no definida
                    if (o == null) {
                        throw new ParseException("ERROR (PLXC.cup): Variable( " + i
                                                + ") no declarada", PLXC.lex.getLine()) ;
                    }

                    // La clase LlamadaMetodo sirve para generar el árbol de código.
                    RESULT = new LlamadaMetodo
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        new ExpresionVariable(PLXC.lex.getLine(), (Variable) o),
                        op, // La operación que se va a realizar
                        new Instruccion[]{e} // El valor que se está asignando
                    ) ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion operadorAditivo expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    // La clase LlamadaMetodo sirve para generar el árbol de código.
                    RESULT = new LlamadaMetodo
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        e1, // El primer argumento de la operación
                        op, // La operación que se va a realizar
                        new Instruccion[]{e2} // El segundo argumento de la operación
                    ) ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion operadorMultiplicativo expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    // La clase LlamadaMetodo sirve para generar el árbol de código.
                    RESULT = new LlamadaMetodo
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        e1, // El primer argumento de la operación
                        op, // La operación que se va a realizar
                        new Instruccion[]{e2} // El segundo argumento de la operación
                    ) ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion operadorRelacional expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    // La clase LlamadaMetodo sirve para generar el árbol de código.
                    RESULT = new LlamadaMetodo
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        e1, // El primer argumento de la operación
                        op, // La operación que se va a realizar
                        new Instruccion[]{e2} // El segundo argumento de la operación
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    // La clase CortoCircuito es como la clase LlamadaMetodo
                    // sirve para generar el árbol de código. Esto es lo típico de las condiciones
                    // de un if por ejemplo cuando se hace un &&.
                    RESULT = new CortoCircuito
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        e1, // El primer argumento de la operación
                        Metodos.AND, // La operación que se va a realizar
                        e2 // El segundo argumento de la operación
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new CortoCircuito
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        e1, // El primer argumento de la operación
                        Metodos.OR, // La operación que se va a realizar
                        e2 // El segundo argumento de la operación
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new LlamadaMetodo
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        e, // El primer y único argumento de la operación
                        Metodos.NOT, // La operación que se va a realizar
                        null // El segundo argumento de la operación, evidentemente nulo
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion IMPLICA expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    //           EQUIVALENTE
                    // !e1 || e2    ===     e1 --> e2
                    // Estas dos expresiones equivalentes tienen la misma tabla de verdad
                    // No hace falta implementar un nuevo operador booleano
                    // Conseguimos implementar el operador de implicación a partir de
                    // operaciones con AND, OR y NOT.
                    // Esto es muy común en lógica proposicional.
                    Instruccion i = new LlamadaMetodo(PLXC.lex.getLine(), e1, Metodos.NOT,null) ; // !e1
                    RESULT = new CortoCircuito
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        i,
                        Metodos.OR, // La operación que se va a realizar
                        e2 // El segundo argumento de la operación
                    ) ; // !e1 || e2    ===     e1 --> e2
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion DOBLEIMPLICA expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    //                            EQUIVALENTE
                    // (e1 && e2) || (!e1 && !e2)     ===      e1 <--> e2
                    // Estas dos expresiones equivalentes tienen la misma tabla de verdad
                    // No hace falta implementar un nuevo operador booleano
                    // Conseguimos implementar el operador de implicación doble a partir de
                    // operaciones con AND, OR y NOT.
                    // Esto es muy común en lógica proposicional.
                    Instruccion i1 = new CortoCircuito(PLXC.lex.getLine(), e1, Metodos.AND,e2)       ; // e1 && e2
                    Instruccion i2_1 = new LlamadaMetodo(PLXC.lex.getLine(), e1, Metodos.NOT,null)   ; // !e1
                    Instruccion i2_2 = new LlamadaMetodo(PLXC.lex.getLine(), e2, Metodos.NOT,null)   ; // !e2

                    Instruccion i2  = new CortoCircuito(PLXC.lex.getLine(), i2_1, Metodos.AND, i2_2) ; // !e1 && !e2

                    RESULT = new CortoCircuito
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        i1,
                        Metodos.OR, // La operación que se va a realizar
                        i2 // El segundo argumento de la operación
                    ) ; // (e1 && e2) || (!e1 && !e2)     ===      e1 <--> e2
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= operadorUnario expresion 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new LlamadaMetodo
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        e, // El primer y único argumento de la operación
                        op, // La operación que se va a realizar
                        null // Porque es unario, no tiene segundo argumento
                    ) ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion operadorUnarioPost 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new CopiaYLlama
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        e, // El primer y único argumento de la operación
                        op, // La operación que se va a realizar
                        null // Porque es unario, no tiene segundo argumento
                    ) ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion operadorDesplazamiento expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    // La clase LlamadaMetodo sirve para generar el árbol de código.
                    RESULT = new LlamadaMetodo
                    (
                        PLXC.lex.getLine(), // Línea del código fuente para depuración de errores
                        e1, // El primer argumento de la operación
                        op, // La operación que se va a realizar
                        new Instruccion[]{e2} // El segundo argumento de la operación
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion INTERROGANTE expresion DP expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e3 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new SentINTERROGANTE(PLXC.lex.getLine(),e1,e2,e3) ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion ELVIS expresion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new SentELVIS(PLXC.lex.getLine(),e1,e2) ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= AP expresion CP 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = e ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operadorAditivo ::= MAS 
            {
              String RESULT =null;
		 RESULT = Metodos.SUMA        ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAditivo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operadorAditivo ::= MENOS 
            {
              String RESULT =null;
		 RESULT = Metodos.RESTA       ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAditivo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operadorMultiplicativo ::= MULT 
            {
              String RESULT =null;
		 RESULT = Metodos.PRODUCTO    ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorMultiplicativo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operadorMultiplicativo ::= DIV 
            {
              String RESULT =null;
		 RESULT = Metodos.DIVISION    ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorMultiplicativo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operadorMultiplicativo ::= MODULO 
            {
              String RESULT =null;
		 RESULT = Metodos.MODULO      ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorMultiplicativo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operadorRelacional ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = Metodos.IGUAL       ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operadorRelacional ::= DIST 
            {
              String RESULT =null;
		 RESULT = Metodos.DISTINTO    ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operadorRelacional ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = Metodos.MAYOR       ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operadorRelacional ::= MENOR 
            {
              String RESULT =null;
		 RESULT = Metodos.MENOR       ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operadorRelacional ::= MAYORIGUAL 
            {
              String RESULT =null;
		 RESULT = Metodos.MAYOR_IGUAL ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operadorRelacional ::= MENORIGUAL 
            {
              String RESULT =null;
		 RESULT = Metodos.MENOR_IGUAL ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operadorAsignacion ::= ASIG 
            {
              String RESULT =null;
		 RESULT = Metodos.ASIGNAR     ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAsignacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operadorAsignacion ::= MASIGUAL 
            {
              String RESULT =null;
		 RESULT = Metodos.MAS_IGUAL   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAsignacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operadorAsignacion ::= MENOSIGUAL 
            {
              String RESULT =null;
		 RESULT = Metodos.MENOS_IGUAL ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAsignacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operadorAsignacion ::= MULTIGUAL 
            {
              String RESULT =null;
		 RESULT = Metodos.MULT_IGUAL  ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAsignacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operadorAsignacion ::= DIVIGUAL 
            {
              String RESULT =null;
		 RESULT = Metodos.DIV_IGUAL   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAsignacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operadorUnario ::= MENOS 
            {
              String RESULT =null;
		 RESULT = Metodos.OPUESTO     ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operadorUnario ::= MASMAS 
            {
              String RESULT =null;
		 RESULT = Metodos.SIGUIENTE   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operadorUnario ::= MENOSMENOS 
            {
              String RESULT =null;
		 RESULT = Metodos.ANTERIOR    ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operadorUnario ::= MAS 
            {
              String RESULT =null;
		 RESULT = Metodos.MAS_UNARIO  ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operadorUnarioPost ::= MASMAS 
            {
              String RESULT =null;
		 RESULT = Metodos.SIGUIENTE   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnarioPost",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operadorUnarioPost ::= MENOSMENOS 
            {
              String RESULT =null;
		 RESULT = Metodos.ANTERIOR    ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnarioPost",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operadorDesplazamiento ::= DESPIZQUIERDA 
            {
              String RESULT =null;
		 RESULT = Metodos.DESP_IZQUIERDA ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorDesplazamiento",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operadorDesplazamiento ::= DESPDERECHA 
            {
              String RESULT =null;
		 RESULT = Metodos.DESP_DERECHA   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorDesplazamiento",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo ::= INT 
            {
              Tipo RESULT =null;
		
                // Devuelve objeto de tipo int, contactamos con la clase TipoInt
                RESULT = TipoInt.instancia ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		
                // Devuelve objeto de tipo boolean, contactamos con la clase TipoBool
                RESULT = TipoBool.instancia ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		
                // Devuelve objeto de tipo char, contactamos con la clase TipoChar
                RESULT = TipoChar.instancia ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		
                // Devuelve objeto de tipo float, contactamos con la clase TipoFloat
                RESULT = TipoFloat.instancia ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal ::= ENTERO 
            {
              Literal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               // Se crea un objeto, un literal de tipo entero
               RESULT = new Literal(bloqueActual, TipoInt.instancia, e) ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literal ::= BOOLEANO 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               // Se crea un objeto, un literal de tipo booleano
               RESULT = new Literal(bloqueActual, TipoBool.instancia, b) ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal ::= CARACTER 
            {
              Literal RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Se crea un objeto, un literal de tipo caracter
                RESULT = new Literal(bloqueActual, TipoChar.instancia, c) ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= REAL 
            {
              Literal RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Se crea un objeto, un literal de tipo real
                RESULT = new Literal(bloqueActual, TipoFloat.instancia, r) ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
